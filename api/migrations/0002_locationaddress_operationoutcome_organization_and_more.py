# Generated by Django 5.1.4 on 2025-01-02 10:29

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0001_concepts"),
    ]

    operations = [
        migrations.CreateModel(
            name="LocationAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OperationOutcome",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="A name associated with the organization."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Practitioner",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.",
                        max_length=8,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="concept",
            name="system",
            field=models.CharField(
                blank=True,
                help_text="The identification of the code system that defines the meaning of the symbol in the code.",
                max_length=256,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="concept",
            name="valueset",
            field=models.CharField(
                choices=[
                    ("UKCore-HumanLanguage", "Uk Core Human Language"),
                    ("UKCoreMedicationForm", "Uk Core Medication Form"),
                    ("UKCoreMedicationCode", "Uk Core Medication Code"),
                    ("ObservationCategoryCodes", "Observation Category Code"),
                    ("UKCoreObservationType", "Uk Core Observation Type"),
                    ("UKCoreSpecimenType", "Uk Core Specimen Type"),
                    ("FHIRSpecimenCollectionMethod", "Fhir Specimen Collection Method"),
                    ("UKCoreSpecimenBodySite", "Uk Core Specimen Body Site"),
                    (
                        "ServiceDeliveryLocationRoleType",
                        "Service Delivery Location Role Type",
                    ),
                    ("SNOMEDCTBodyStructures", "Snomed Ct Body Structures"),
                    ("UKCoreVaccineCode", "Uk Core Vaccine Code"),
                    (
                        "UKCoreOperationOutcomeIssueDetails",
                        "Uk Core Operation Outcome Issue Details",
                    ),
                    ("UKCorePracticeSettingCode", "Uk Core Practice Settings Code"),
                    ("v2.0276", "V2 0276"),
                    ("ServiceCategory", "Service Category"),
                    ("ServiceType", "Service Type"),
                    ("PractitionerRole", "Practitioner Role"),
                ],
                max_length=128,
            ),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("inactive", "Inactive"),
                        ],
                        help_text="Is the location active, inactive, or suspended.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        blank=True,
                        help_text="Name of the location as used by humans. This does not need to be unique.",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type of function performed",
                        limit_choices_to={
                            "valueset": "ServiceDeliveryLocationRoleType"
                        },
                        to="api.concept",
                    ),
                ),
                (
                    "address",
                    models.OneToOneField(
                        blank=True,
                        help_text="If locations can be visited, we need to keep track of their address.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.locationaddress",
                    ),
                ),
                (
                    "managingOrganization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization responsible for provisioning and upkeep",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LocationIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code")
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.location"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LocationTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.location",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Medication",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="A code to indicate if the medication is in active use.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "batchLotNumber",
                    models.CharField(
                        blank=True,
                        help_text="Identifier assigned to batch",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "batchExpirationDate",
                    models.DateTimeField(
                        blank=True, help_text="When batch will expire", null=True
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="Codes that identify this medication",
                        limit_choices_to={"valueset": "UKCoreMedicationCode"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="medicationcode",
                        to="api.concept",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        blank=True,
                        help_text="Codes that identify this medication",
                        limit_choices_to={"valueset": "UKCoreMedicationForm"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="medicationform",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Observation",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("registered", "Registered"),
                            ("preliminary", "Preliminary"),
                            ("final", "Final"),
                            ("amended", "Amended"),
                        ],
                        help_text="The status of the result value.",
                        max_length=16,
                    ),
                ),
                (
                    "effectiveDateTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Clinically relevant time/time-period for observation",
                        null=True,
                    ),
                ),
                (
                    "effectiveInstant",
                    models.DateTimeField(
                        blank=True,
                        help_text="Clinically relevant time/time-period for observation",
                        null=True,
                    ),
                ),
                ("valueQuantity", models.JSONField(blank=True, null=True)),
                (
                    "bodySite",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of observation (code / type)",
                        limit_choices_to={"valueset": "SNOMEDCTBodyStructures"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observationbodysite",
                        to="api.concept",
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        help_text="A code that classifies the general type of observation being made.",
                        limit_choices_to={"valueset": "ObservationCategoryCodes"},
                        related_name="observationcategory",
                        to="api.concept",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="Type of observation (code / type)",
                        limit_choices_to={"valueset": "UKCoreObservationType"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="observationcode",
                        to="api.concept",
                    ),
                ),
                ("hasMember", models.ManyToManyField(to="api.observation")),
                (
                    "performer",
                    models.ManyToManyField(
                        help_text="Who is responsible for the observation",
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ObservationComponent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("valueQuantity", models.JSONField(blank=True, null=True)),
                (
                    "code",
                    models.ForeignKey(
                        limit_choices_to={"valueset": "UKCoreObservationType"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "observation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.observation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ObservationIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/ods-organization-code",
                                "Ods Organisation Code",
                            ),
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code"),
                            ("https://fhir.nhs.uk/Id/nhs-number", "Nhs Number"),
                            (
                                "https://fhir.hl7.org.uk/Id/gmc-number",
                                "General Medical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/gphc-number",
                                "General Pharmaceutical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/nmc-number",
                                "Nurses Midwives Health Visitors Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/hcpc-number",
                                "Healthcare Professions Registration Number",
                            ),
                            ("https://fhir.nhs.uk/Id/sds-user-id", "Spine"),
                            ("https://tools.ietf.org/html/rfc4122", "Uuid"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "observation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.observation",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OperationOutcomeIssue",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("fatal", "Fatal"),
                            ("error", "Error"),
                            ("warning", "Warning"),
                            ("information", "Information"),
                        ],
                        help_text='Indicates how relevant the issue is to the overall success of the action. This is labelled as "Is Modifier" because applications should not confuse hints and warnings with errors.',
                        max_length=16,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("Code", "Code"),
                            ("invalid", "Invalid"),
                            ("structure", "Structure"),
                            ("required", "Required"),
                            ("value", "Value"),
                            ("invariant", "Invariant"),
                            ("security", "Security"),
                            ("login", "Login"),
                            ("unknown", "Unknown"),
                            ("expired", "Expired"),
                            ("forbidden", "Forbidden"),
                            ("suppressed", "Suppressed"),
                            ("processing", "Processing"),
                            ("not-supported", "Not Supported"),
                            ("duplicate", "Duplicate"),
                            ("multiple-matches", "Multiple Matches"),
                            ("not-found", "Not Found"),
                            ("deleted", "Deleted"),
                            ("too-long", "Too Long"),
                            ("code-invalid", "Code Invalid"),
                            ("extension", "Extension"),
                            ("too-costly", "Too Costly"),
                            ("business-rule", "Business Rule"),
                            ("conflict", "Conflict"),
                            ("transient", "Transient"),
                            ("lock-error", "Lock Error"),
                            ("no-store", "No Store"),
                            ("exception", "Exception"),
                            ("timeout", "Timeout"),
                            ("incomplete", "Incomplete"),
                            ("throttled", "Throttled"),
                            ("informational", "Informational"),
                        ],
                        help_text="Error or warning code",
                        max_length=64,
                    ),
                ),
                (
                    "expression",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="FFHIRPath of element(s) related to issue",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "diagnostics",
                    models.TextField(
                        blank=True,
                        help_text="Additional diagnostic information about the issue",
                        null=True,
                    ),
                ),
                (
                    "details",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional details about the error",
                        limit_choices_to={
                            "valueset": "UKCoreOperationOutcomeIssueDetails"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "operation_outcome",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.operationoutcome",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationContactPoint",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/ods-organization-code",
                                "Ods Organisation Code",
                            ),
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "birthDate",
                    models.DateField(
                        blank=True,
                        help_text="The date of birth for the individual.",
                        null=True,
                    ),
                ),
                (
                    "communication",
                    models.ManyToManyField(
                        limit_choices_to={"system": "UKCore-HumanLanguage"},
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="observation",
            name="subject",
            field=models.ForeignKey(
                blank=True,
                help_text="Who and/or what the observation is about",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="api.patient",
            ),
        ),
        migrations.CreateModel(
            name="Immunization",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("completed", "Completed"),
                            ("entered-in-error", "Entered In Error"),
                            ("not-done", "Not Done"),
                        ],
                        help_text="Indicates the current status of the immunization event.",
                        max_length=16,
                    ),
                ),
                (
                    "occurrenceDateTime",
                    models.DateTimeField(
                        help_text="vaccine administered or was to be administered."
                    ),
                ),
                (
                    "lotNumber",
                    models.CharField(
                        blank=True,
                        help_text="Lot number of the vaccine.",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "vaccineCode",
                    models.ForeignKey(
                        help_text="Vaccine that was administered or was to be administered.",
                        limit_choices_to="UKCoreVaccineCode",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Where immunization occurred",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.location",
                    ),
                ),
                (
                    "manufacturer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Name of vaccine manufacturer.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="The patient who either received or did not receive the immunization.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patient",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patient",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://fhir.nhs.uk/Id/nhs-number", "Nhs Number")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.patient"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientName",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("nickname", "Nickname"),
                            ("anonymous", "Anonymous"),
                            ("old", "Old"),
                            ("maiden", "Maiden"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "family",
                    models.TextField(
                        blank=True,
                        help_text="Family name (often called 'Surname').",
                        null=True,
                    ),
                ),
                (
                    "given",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Given names (not always 'first'). Includes middle names.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "prefix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "suffix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patient",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.patient"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitioner",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            ("https://fhir.nhs.uk/Id/nhs-number", "Nhs Number"),
                            (
                                "https://fhir.hl7.org.uk/Id/gmc-number",
                                "General Medical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/gphc-number",
                                "General Pharmaceutical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/nmc-number",
                                "Nurses Midwives Health Visitors Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/hcpc-number",
                                "Healthcare Professions Registration Number",
                            ),
                            ("https://fhir.nhs.uk/Id/sds-user-id", "Spine"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitioner",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerName",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("nickname", "Nickname"),
                            ("anonymous", "Anonymous"),
                            ("old", "Old"),
                            ("maiden", "Maiden"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "family",
                    models.TextField(
                        blank=True,
                        help_text="Family name (often called 'Surname').",
                        null=True,
                    ),
                ),
                (
                    "given",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Given names (not always 'first'). Includes middle names.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "prefix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "suffix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitioner",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerRole",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the resource was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the resource was/is in use",
                        null=True,
                    ),
                ),
                (
                    "code",
                    models.ManyToManyField(
                        help_text="Roles which this practitioner may perform",
                        limit_choices_to={"valueset": "PractitionerRole"},
                        related_name="practitionerrole_code",
                        to="api.concept",
                    ),
                ),
                (
                    "location",
                    models.ManyToManyField(
                        help_text="The location(s) at which this practitioner provides care",
                        to="api.location",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organization where the roles are available.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        help_text="Practitioner that is able to provide the defined services for the organization.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitioner",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        help_text="Specific specialty of the practitioner",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerRoleIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/sds-role-profile-id",
                                "Sds Role Profile Id",
                            )
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "practitioner_role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerrole",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerRoleTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "practitioner_role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerrole",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitioner",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Schedule",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, help_text="Comments on availability", null=True
                    ),
                ),
                (
                    "planningHorizonStart",
                    models.DateTimeField(
                        blank=True,
                        help_text="Period of time covered by schedule.",
                        null=True,
                    ),
                ),
                (
                    "planningHorizonEnd",
                    models.DateTimeField(
                        blank=True,
                        help_text="Period of time covered by schedule.",
                        null=True,
                    ),
                ),
                (
                    "actor",
                    models.ManyToManyField(
                        help_text="Resource(s) that availability information is being provided for",
                        to="api.location",
                    ),
                ),
                (
                    "serviceCategory",
                    models.ManyToManyField(
                        help_text="High-level category.",
                        limit_choices_to={"valueset": "ServiceCategory"},
                        related_name="schedule_servicecategory_set",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceType",
                    models.ManyToManyField(
                        help_text="Specific service.",
                        limit_choices_to={"valueset": "ServiceType"},
                        related_name="schedule_servicetype_set",
                        to="api.concept",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        help_text="Type of specialty needed.",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        related_name="schedule_specialty_set",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScheduleIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "schedule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.schedule"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Slot",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("busy", "Busy"),
                            ("free", "Free"),
                            ("busy-unavailable", "Busy Unavailable"),
                            ("busy-tentative", "Busy Tentative"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="The status of the slot, e.g free, busy, etc.",
                        max_length=16,
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(
                        help_text="Date/Time that the slot is to begin."
                    ),
                ),
                (
                    "end",
                    models.DateTimeField(
                        help_text="Date/Time that the slot is to conclude."
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments on the slot to describe any extended information. Such as custom constraints on the slot",
                        null=True,
                    ),
                ),
                (
                    "appointmentType",
                    models.ForeignKey(
                        blank=True,
                        help_text="The style of appointment or patient that may be booked in the slot.",
                        limit_choices_to={"valueset": "v2.0276"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slot_appointmenttype",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceCategory",
                    models.ManyToManyField(
                        help_text="A broad categorization of the service that is to be performed during this appointment.",
                        limit_choices_to={"valueset": "ServiceCategory"},
                        related_name="slot_servicecategory",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceType",
                    models.ManyToManyField(
                        help_text="The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.",
                        limit_choices_to={"valueset": "ServiceType"},
                        related_name="slot_servicetype",
                        to="api.concept",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        help_text="The specialty of a practitioner that would be required to perform the service requested in this appointment.",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        related_name="slot_speciality",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SlotIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "slot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.slot"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Specimen",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("available", "Available"),
                            ("unavailable", "Unavailable"),
                            ("unsatisfactory", "Unsatisfactory"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="The availability of the specimen.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "receivedTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="The time when specimen was received for processing.",
                        null=True,
                    ),
                ),
                ("collectedDateTime", models.DateTimeField(blank=True, null=True)),
                (
                    "bodySite",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"valueset": "UKCoreSpecimenBodySite"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimenbodysite",
                        to="api.concept",
                    ),
                ),
                (
                    "collector",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitioner",
                    ),
                ),
                (
                    "method",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"valueset": "FHIRSpecimenCollectionMethod"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimenmethod",
                        to="api.concept",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Where the specimen came from.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patient",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        help_text="The kind of material that forms the specimen.",
                        limit_choices_to={"valueset": "UKCoreSpecimenType"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
