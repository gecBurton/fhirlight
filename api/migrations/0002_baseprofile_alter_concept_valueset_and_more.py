# Generated by Django 5.1.5 on 2025-01-15 11:35

import api.fields
import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0001_concepts"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="BaseProfile",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.AlterField(
            model_name="concept",
            name="valueset",
            field=models.CharField(
                choices=[
                    ("UKCore-HumanLanguage", "Uk Core Human Language"),
                    ("UKCoreMedicationForm", "Uk Core Medication Form"),
                    ("UKCoreMedicationCode", "Uk Core Medication Code"),
                    ("ObservationCategoryCodes", "Observation Category Code"),
                    ("UKCoreObservationType", "Uk Core Observation Type"),
                    ("UKCoreSpecimenType", "Uk Core Specimen Type"),
                    ("FHIRSpecimenCollectionMethod", "Fhir Specimen Collection Method"),
                    ("UKCoreSpecimenBodySite", "Uk Core Specimen Body Site"),
                    (
                        "ServiceDeliveryLocationRoleType",
                        "Service Delivery Location Role Type",
                    ),
                    ("SNOMEDCTBodyStructures", "Snomed Ct Body Structures"),
                    ("UKCoreVaccineCode", "Uk Core Vaccine Code"),
                    (
                        "UKCoreOperationOutcomeIssueDetails",
                        "Uk Core Operation Outcome Issue Details",
                    ),
                    ("UKCorePracticeSettingCode", "Uk Core Practice Settings Code"),
                    ("v2.0276", "V2 0276"),
                    ("ServiceCategory", "Service Category"),
                    ("ServiceType", "Service Type"),
                    ("PractitionerRole", "Practitioner Role"),
                    ("UKCoreProcedureCode", "Uk Core Procedure Code"),
                    (
                        "UKCorePersonRelationshipType",
                        "Uk Core Person Relationship Type",
                    ),
                    (
                        "DiagnosticServiceSectionCodes",
                        "Diagnostic Service Section Code",
                    ),
                    ("UKCoreReportCode", "Uk Core Report Code"),
                    ("ConditionClinicalStatusCodes", "Condition Clinical Status Code"),
                    ("ConditionVerificationStatus", "Condition Verification Status"),
                    ("UKCoreConditionCategory", "Uk Core Condition Category"),
                    ("Condition/DiagnosisSeverity", "Condition Diagnosis Severity"),
                    ("UKCoreConditionCode", "Uk Core Condition Code"),
                    ("UKCoreDeviceType", "Uk Core Device Type"),
                    ("ConsentState", "Consent State"),
                    ("ConsentScopeCodes", "Consent Scope Code"),
                    ("ConsentCategoryCodes", "Consent Category Code"),
                    ("v3.PurposeOfUse", "V3 Purpose Of Use"),
                    ("v3.ActEncounterCode", "V3 Act Encounter Code"),
                    ("UKCoreEncounterType", "Uk Core Encounter Type"),
                    ("ParticipantType", "Participant Type"),
                    ("EncounterReasonCodes", "Encounter Reason Code"),
                    ("UKCoreDischargeDestination", "Uk Core Discharge Destination"),
                    ("EpisodeOfCareType", "Episode Of Care Type"),
                    (
                        "UKCoreServiceRequestReasonCode",
                        "Uk Core Service Request Reason Code",
                    ),
                    ("ServiceRequestCategoryCodes", "Service Request Category Code"),
                    (
                        "v3.ServiceDeliveryLocationRoleType",
                        "V3 Service Delivery Location Role Type",
                    ),
                    ("CID29AcquisitionModality", "Cid 29 Acquisition Modality"),
                    ("StandardSOPClasses", "B5 Standard Sop Classes"),
                    (
                        "AllergyIntoleranceClinicalStatusCodes",
                        "Allergy Intolerance Clinical Status Code",
                    ),
                    (
                        "AllergyIntoleranceVerificationStatusCodes",
                        "Allergy Intolerance Verification Status Code",
                    ),
                    ("UKCoreAllergyCode", "Uk Core Allergy Code"),
                    ("UKCoreAppointmentReasonCode", "Uk Core Appointment Reason Code"),
                    ("UKCoreDocumentType", "Uk Core Document Type"),
                    (
                        "UKCoreCompositionSectionCode",
                        "Uk Core Composition Section Code",
                    ),
                    ("AdministrativeGender", "Administrative Gender"),
                    (
                        "Condition/Problem/DiagnosisCodes",
                        "Condition Problem Diagnosis Code",
                    ),
                    ("FlagCode", "Flag Code"),
                    ("FlagCategory", "Flag Category"),
                    ("ReferralMethod", "Referral Method"),
                    (
                        "HealthcareServiceCharacteristic",
                        "Healthcare Service Characteristic",
                    ),
                    ("ServiceProvisionConditions", "Service Provision Conditions"),
                    ("TaskCode", "Task Code"),
                    ("ProcedurePerformerRoleCodes", "Procedure Performer Role Code"),
                    ("TaskOutput", "Task Output Type Code"),
                    ("UKCoreListCode", "Uk Core List Code"),
                    ("UKCoreListEmptyReasonCode", "Uk Core List Empty Reason Code"),
                    (
                        "UKCoreMedicationRequestCategory",
                        "Uk Core Medication Request Category Code",
                    ),
                    ("UKCoreBodySite", "Uk Core Body Site"),
                    (
                        "UKCoreSubstanceOrProductAdministrationRoute",
                        "Uk Core Substance Or Product Administration Route",
                    ),
                    (
                        "UKCoreMedicationDosageMethod",
                        "Uk Core Medication Dosage Method",
                    ),
                    ("DoseAndRateType", "Dose And Rate Type Code"),
                    ("MedicationCodeableConcept", "Medication Codeable Concept"),
                    (
                        "UKCoreMedicationStatementCategory",
                        "Uk Core Medication Statement Category Code",
                    ),
                    ("asNeededCodeableConcept", "As Needed Codeable Concept"),
                    ("UKCoreOrganizationType", "Uk Core Organization Type"),
                ],
                max_length=128,
            ),
        ),
        migrations.CreateModel(
            name="AllergyIntoleranceProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "recordedDate",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date first version of the resource instance was recorded",
                        null=True,
                    ),
                ),
                (
                    "asserter",
                    models.ForeignKey(
                        blank=True,
                        help_text="Source of the information about the allergy",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AllergyIntolerance_asserter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "clinicalStatus",
                    models.ForeignKey(
                        blank=True,
                        help_text="Defines whether the allergy or intolerance is active, inactive or resolved.",
                        limit_choices_to={
                            "valueset": "AllergyIntoleranceClinicalStatusCodes"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AllergyIntolerance_clinicalStatus",
                        to="api.concept",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="Code that identifies the allergy or intolerance",
                        limit_choices_to={"valueset": "UKCoreAllergyCode"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AllergyIntolerance_code",
                        to="api.concept",
                    ),
                ),
                (
                    "encounter",
                    models.ForeignKey(
                        blank=True,
                        help_text="Encounter when the allergy or intolerance was asserted",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["encounterprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AllergyIntolerance_encounter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="Links the allergy to the patient.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AllergyIntolerance_patient",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "recorder",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who recorded the sensitivity.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AllergyIntolerance_recorder",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "verificationStatus",
                    models.ForeignKey(
                        blank=True,
                        help_text="Defines the assertion of the allergy or intolerance.",
                        limit_choices_to={
                            "valueset": "AllergyIntoleranceVerificationStatusCodes"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AllergyIntolerance_verificationStatus",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="CompositionProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("preliminary", "Preliminary"),
                            ("final", "Final"),
                            ("amended", "Amended"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="The workflow/clinical status of this composition.",
                        max_length=32,
                    ),
                ),
                ("date", models.DateTimeField(help_text="Composition editing time")),
                ("title", models.TextField(help_text="Human Readable name/title")),
                (
                    "author",
                    models.ManyToManyField(
                        help_text="Identifies who is responsible for the information in the composition.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        related_name="Composition_author",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "custodian",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization which maintains the composition",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Composition_custodian",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "encounter",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who and/or what the composition is about",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["encounterprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Composition_encounter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who and/or what the composition is about.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Composition_subject",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        help_text="Specifies the particular kind of composition.",
                        limit_choices_to={"valueset": "UKCoreDocumentType"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Composition_type",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="HealthcareServiceProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Description of service as presented to a consumer while searching",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Additional description and/or any specific issues not covered elsewhere",
                        null=True,
                    ),
                ),
                (
                    "extraDetails",
                    models.TextField(
                        blank=True,
                        help_text="Extra details about the service that can't be placed in the other fields",
                        null=True,
                    ),
                ),
                (
                    "appointmentRequired",
                    models.BooleanField(
                        blank=True,
                        help_text="If an appointment is required for access to this service",
                        null=True,
                    ),
                ),
                (
                    "availabilityExceptions",
                    models.TextField(
                        blank=True,
                        help_text="Description of availability exceptions",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Broad category of service being performed or delivered",
                        limit_choices_to={"valueset": "ServiceCategory"},
                        related_name="HealthcareService_category",
                        to="api.concept",
                    ),
                ),
                (
                    "characteristic",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Collection of characteristics (attributes)",
                        limit_choices_to={
                            "valueset": "HealthcareServiceCharacteristic"
                        },
                        related_name="HealthcareService_characteristic",
                        to="api.concept",
                    ),
                ),
                (
                    "location",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Location(s) where service may be provided",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["locationprofile"]
                        },
                        related_name="HealthcareService_location",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "providedBy",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization that provides this service",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="HealthcareService_providedBy",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "referralMethod",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Ways that the service accepts referrals",
                        limit_choices_to={"valueset": "ReferralMethod"},
                        related_name="HealthcareService_referralMethod",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceProvisionCode",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Conditions under which service is available/offered",
                        limit_choices_to={"valueset": "ServiceProvisionConditions"},
                        related_name="HealthcareService_serviceProvisionCode",
                        to="api.concept",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specialties handled by the HealthcareService.",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        related_name="HealthcareService_specialty",
                        to="api.concept",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Type of service that may be delivered or performed",
                        limit_choices_to={"valueset": "ServiceType"},
                        related_name="HealthcareService_type",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="ImagingStudyProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("registered", "Registered"),
                            ("available", "Available"),
                            ("cancelled", "Cancelled"),
                            ("entered-in-error", "Entered In Error"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="The current state of the ImagingStudy.",
                        max_length=32,
                    ),
                ),
                ("started", models.DateTimeField(blank=True, null=True)),
                ("numberOfSeries", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "numberOfInstances",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "encounter",
                    models.ForeignKey(
                        blank=True,
                        help_text="Encounter with which this imaging study is associated",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["encounterprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ImagingStudy_encounter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "modality",
                    models.ManyToManyField(
                        blank=True,
                        help_text="All series modality if actual acquisition modalities.",
                        limit_choices_to={"valueset": "UKCoreConditionCategory"},
                        related_name="ImagingStudy_modality",
                        to="api.concept",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who or what is the subject of the study.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ImagingReport_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="LocationProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("inactive", "Inactive"),
                        ],
                        help_text="Is the location active, inactive, or suspended.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        blank=True,
                        help_text="Name of the location as used by humans. This does not need to be unique.",
                        null=True,
                    ),
                ),
                (
                    "managingOrganization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization responsible for provisioning and upkeep",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Location_organization",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Type of function performed",
                        limit_choices_to={
                            "valueset": "ServiceDeliveryLocationRoleType"
                        },
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="ObservationProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("registered", "Registered"),
                            ("preliminary", "Preliminary"),
                            ("final", "Final"),
                            ("amended", "Amended"),
                        ],
                        help_text="The status of the result value.",
                        max_length=16,
                    ),
                ),
                (
                    "effectiveDateTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Clinically relevant time/time-period for observation",
                        null=True,
                    ),
                ),
                (
                    "effectiveInstant",
                    models.DateTimeField(
                        blank=True,
                        help_text="Clinically relevant time/time-period for observation",
                        null=True,
                    ),
                ),
                ("valueQuantity", models.JSONField(blank=True, null=True)),
                (
                    "bodySite",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of observation (code / type)",
                        limit_choices_to={"valueset": "SNOMEDCTBodyStructures"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Observation_bodySite",
                        to="api.concept",
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        blank=True,
                        help_text="A code that classifies the general type of observation being made.",
                        limit_choices_to={"valueset": "ObservationCategoryCodes"},
                        related_name="Observation_category",
                        to="api.concept",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="Type of observation (code / type)",
                        limit_choices_to={"valueset": "UKCoreObservationType"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Observation_code",
                        to="api.concept",
                    ),
                ),
                (
                    "hasMember",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["observationprofile"]
                        },
                        related_name="Observation_result",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "performer",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Who is responsible for the observation",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": [
                                "organizationprofile",
                                "practitionerprofile",
                            ]
                        },
                        related_name="Observation_performer",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "specimen",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["specimenprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Observation_specimen",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who and/or what the observation is about",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Observation_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="OperationOutcomeProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="OrganizationProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="A name associated with the organization."
                    ),
                ),
                (
                    "alias",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=256),
                        blank=True,
                        help_text="A list of alternate names that the organization is known as, or was known as in the past.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "partOf",
                    models.ForeignKey(
                        blank=True,
                        help_text="The organization of which this organization forms a part.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Organization_partOf",
                        to="api.organizationprofile",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The kind(s) of organization that this is.",
                        limit_choices_to={"valueset": "UKCoreOrganizationType"},
                        related_name="Organization_type",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="PatientProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "birthDate",
                    models.DateField(
                        blank=True,
                        help_text="The date of birth for the individual.",
                        null=True,
                    ),
                ),
                (
                    "communication",
                    models.ManyToManyField(
                        limit_choices_to={"system": "UKCore-HumanLanguage"},
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="PractitionerProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("other", "Other"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.",
                        max_length=8,
                        null=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="PractitionerRoleProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the resource was/is in use",
                        null=True,
                    ),
                ),
                (
                    "code",
                    models.ManyToManyField(
                        help_text="Roles which this practitioner may perform",
                        limit_choices_to={"valueset": "PractitionerRole"},
                        related_name="PractitionerRole_code",
                        to="api.concept",
                    ),
                ),
                (
                    "location",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The location(s) at which this practitioner provides care",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["locationprofile"]
                        },
                        related_name="PractitionerRole_location",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organization where the roles are available.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="PractitionerRole_organization",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        help_text="Practitioner that is able to provide the defined services for the organization.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="PractitionerRole_practitioner",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        help_text="Specific specialty of the practitioner",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="QuestionnaireProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="Canonical identifier for this questionnaire, represented as a URI (globally unique).",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Name for this questionnaire (human friendly).",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "experimental",
                    models.BooleanField(
                        blank=True,
                        help_text="For testing purposes, not real usage.",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        blank=True, help_text="Date last changed", null=True
                    ),
                ),
                (
                    "publisher",
                    models.CharField(
                        blank=True,
                        help_text="Name of the publisher (organization or individual)",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "purpose",
                    models.TextField(
                        blank=True,
                        help_text="Intended jurisdiction for questionnaire (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "subjectType",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("AllergyIntolerance", "Allergy Intolerance"),
                                ("Appointment", "Appointment"),
                                ("Composition", "Composition"),
                                ("Condition", "Condition"),
                                ("Consent", "Consent"),
                                ("Device", "Device"),
                                ("DiagnosticReport", "Diagnostic Report"),
                                ("Encounter", "Encounter"),
                                ("EpisodeOfCare", "Episode Of Care"),
                                ("FamilyMemberHistory", "Family Member History"),
                                ("Flag", "Flag"),
                                ("HealthcareService", "Healthcare Service"),
                                ("ImagingStudy", "Imaging Study"),
                                ("Immunization", "Immunization"),
                                ("List", "List"),
                                ("Location", "Location"),
                                ("Medication", "Medication"),
                                (
                                    "MedicationAdministration",
                                    "Medication Administration",
                                ),
                                ("MedicationDispense", "Medication Dispense"),
                                ("MedicationRequest", "Medication Request"),
                                ("MedicationStatement", "Medication Statement"),
                                ("MessageHeader", "Message Header"),
                                ("Observation", "Observation"),
                                ("OperationOutcome", "Operation Outcome"),
                                ("Organization", "Organization"),
                                ("Patient", "Patient"),
                                ("Practitioner", "Practitioner"),
                                ("PractitionerRole", "Practitioner Role"),
                                ("Procedure", "Procedure"),
                                ("Questionnaire", "Questionnaire"),
                                ("QuestionnaireResponse", "Questionnaire Response"),
                                ("RelatedPerson", "Related Person"),
                                ("Schedule", "Schedule"),
                                ("ServiceRequest", "Service Request"),
                                ("Slot", "Slot"),
                                ("Specimen", "Specimen"),
                                ("Task", "Task"),
                            ],
                            max_length=32,
                        ),
                        blank=True,
                        help_text="Resource that can be subject of QuestionnaireResponse.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "effectivePeriod",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="When the questionnaire is expected to be used",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("retired", "Retired"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="The status of this questionnaire. Enables tracking the life-cycle of the content.",
                        max_length=8,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="RelatedPersonProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="The patient this person is related to.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="RelatedPerson_patient",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "relationship",
                    models.ManyToManyField(
                        help_text="The nature of the relationship.",
                        limit_choices_to={"valueset": "UKCorePersonRelationshipType"},
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="Dosage",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True,
                        help_text="Free text dosage instructions.",
                        null=True,
                    ),
                ),
                (
                    "timing",
                    api.fields.TimingField(
                        blank=True,
                        help_text="Event occurs frequency times per period",
                        null=True,
                    ),
                ),
                (
                    "asNeededCodeableConcept",
                    models.ForeignKey(
                        blank=True,
                        help_text="The kind of dose or rate specified",
                        limit_choices_to={"valueset": "asNeededCodeableConcept"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Dosage_asNeededCodeableConcept",
                        to="api.concept",
                    ),
                ),
                (
                    "method",
                    models.ForeignKey(
                        blank=True,
                        help_text="Technique for administering medication",
                        limit_choices_to={"valueset": "UKCoreMedicationDosageMethod"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Dosage_method",
                        to="api.concept",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        blank=True,
                        help_text="How drug should enter body",
                        limit_choices_to={
                            "valueset": "UKCoreSubstanceOrProductAdministrationRoute"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Dosage_route",
                        to="api.concept",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        help_text="Body site to administer to",
                        limit_choices_to={"valueset": "UKCoreBodySite"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Dosage_site",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DoseAndRate",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "doseQuantity",
                    api.fields.QuantityField(
                        blank=True,
                        help_text="Numerical value (with implicit precision)",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        help_text="The kind of dose or rate specified",
                        limit_choices_to={"valueset": "DoseAndRateType"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationRequestDosageInstructionDoseAndRate_type",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ImagingStudySeries",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                ("uid", models.CharField(help_text="DICOM SOP Instance UID")),
                (
                    "number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Numeric identifier of this series",
                        null=True,
                    ),
                ),
                (
                    "numberOfInstances",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of Series Related Instances",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A short human readable summary of the series",
                        null=True,
                    ),
                ),
                (
                    "bodySite",
                    models.ForeignKey(
                        blank=True,
                        help_text="The bodySite of the instances in the series",
                        limit_choices_to={"valueset": "SNOMEDCTBodyStructures"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ImagingStudySeries_bodySite",
                        to="api.concept",
                    ),
                ),
                (
                    "modality",
                    models.ForeignKey(
                        blank=True,
                        help_text="The modality of the instances in the series",
                        limit_choices_to={"valueset": "CID29AcquisitionModality"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ImagingStudySeries_modality",
                        to="api.concept",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.imagingstudyprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ImagingStudySeriesInstance",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                ("uid", models.CharField(help_text="DICOM SOP Instance UID")),
                (
                    "number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The number of this instance in the series",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Description of instance",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "series",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.imagingstudyseries",
                    ),
                ),
                (
                    "sopClass",
                    models.ForeignKey(
                        blank=True,
                        help_text="The modality of the instances in the series",
                        limit_choices_to={"valueset": "StandardSOPClasses"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ImagingStudySeriesInstance_sopClass",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AllergyIntoleranceReaction",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mild", "Mild"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                        ],
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "manifestation",
                    models.ManyToManyField(
                        help_text="Clinical symptoms/signs associated with the Event",
                        limit_choices_to={
                            "valueset": "AllergyIntoleranceVerificationStatusCodes"
                        },
                        to="api.concept",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.allergyintoleranceprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AppointmentProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("proposed", "Proposed"),
                            ("pending", "Pending"),
                            ("booked", "Booked"),
                            ("arrived", "Arrived"),
                            ("fulfilled", "Fulfilled"),
                            ("cancelled", "Cancelled"),
                            ("noshow", "No Show"),
                            ("entered-in-error", "Entered In Error"),
                            ("checked-in", "Checked In"),
                            ("waitlist", "Wait List"),
                        ],
                        help_text="The overall status of the Appointment.",
                        max_length=16,
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Used to make informed decisions if needing to re-prioritize",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Shown on a subject line in a meeting request, or appointment list",
                        null=True,
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(
                        blank=True,
                        help_text="When appointment is to take place",
                        null=True,
                    ),
                ),
                (
                    "end",
                    models.DateTimeField(
                        blank=True,
                        help_text="When appointment is to conclude",
                        null=True,
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date that this appointment was initially created",
                        null=True,
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, help_text="Additional comments", null=True
                    ),
                ),
                (
                    "patientInstruction",
                    models.TextField(
                        blank=True,
                        help_text="Detailed information and instructions for the patient",
                        null=True,
                    ),
                ),
                (
                    "appointmentType",
                    models.ForeignKey(
                        blank=True,
                        help_text="The style of appointment or patient that has been booked in the slot (not service type).",
                        limit_choices_to={"valueset": "UKCoreAppointmentReasonCode"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AppointmentProfile_appointmentType",
                        to="api.concept",
                    ),
                ),
                (
                    "basedOn",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The service request this appointment is allocated to assess",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["servicerequestprofile"]
                        },
                        related_name="Appointment_basedOn",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "reasonReference",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Reason the appointment is to take place (resource)",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["conditionprofile"]
                        },
                        related_name="Appointment_reasonReference",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "serviceCategory",
                    models.ManyToManyField(
                        blank=True,
                        help_text="A broad categorization of the service that is to be performed during this appointment.",
                        limit_choices_to={"valueset": "ServiceCategory"},
                        related_name="AppointmentProfile_serviceCategory",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceType",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The specific service that is to be performed during this appointment.",
                        limit_choices_to={"valueset": "ServiceType"},
                        related_name="AppointmentProfile_serviceType",
                        to="api.concept",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The specialty of a practitioner that would be required to perform the service requested in this appointment.",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        related_name="AppointmentProfile_specialty",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="AppointmentParticipant",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "required",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("required", "Required"),
                            ("optional", "Optional"),
                            ("information-only", "Information Only"),
                        ],
                        help_text="Whether this participant is required to be present at the meeting.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("accepted", "Accepted"),
                            ("declined", "Declined"),
                            ("tentative", "Tentative"),
                            ("needs-action", "Needs Action"),
                        ],
                        help_text="Participation status of the actor.",
                        max_length=16,
                    ),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person, Location/HealthcareService or Device",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": [
                                "practitionerprofile",
                                "patientprofile",
                                "locationprofile",
                            ]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="AppointmentParticipant_actor",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Role of participant in the appointment.",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        related_name="AppointmentParticipant_type",
                        to="api.concept",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.appointmentprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AppointmentIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.appointmentprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CompositionSection",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Label for section (e.g. for ToC).",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        blank=True,
                        help_text="Classification of section (recommended).",
                        limit_choices_to={"valueset": "UKCoreCompositionSectionCode"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "entry",
                    models.ManyToManyField(
                        blank=True,
                        help_text="A reference to data that supports this section",
                        related_name="CompositionSection_entry",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.compositionprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CompositionIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        blank=True,
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.compositionprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ConditionProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        blank=True,
                        help_text="A category assigned to the condition.",
                        limit_choices_to={"valueset": "UKCoreConditionCategory"},
                        related_name="DiagnosticReport_category",
                        to="api.concept",
                    ),
                ),
                (
                    "clinicalStatus",
                    models.ForeignKey(
                        blank=True,
                        help_text="The clinical status of the condition.",
                        limit_choices_to={"valueset": "ConditionClinicalStatusCodes"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="DiagnosticReport_clinicalStatus",
                        to="api.concept",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        blank=True,
                        help_text="Identification of the condition, problem or diagnosis.",
                        limit_choices_to={"valueset": "UKCoreConditionCode"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="DiagnosticReport_code",
                        to="api.concept",
                    ),
                ),
                (
                    "recorder",
                    models.ForeignKey(
                        blank=True,
                        help_text="Individual who recorded the record and takes responsibility for its content..",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="DiagnosticReport_recorder",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "severity",
                    models.ForeignKey(
                        blank=True,
                        help_text="A subjective assessment of the severity of the condition as evaluated by the clinician.",
                        limit_choices_to={"valueset": "Condition/DiagnosisSeverity"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="DiagnosticReport_severity",
                        to="api.concept",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="Indicates the patient or group who the condition record is associated with.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="DiagnosticReport_subject",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "verificationStatus",
                    models.ForeignKey(
                        blank=True,
                        help_text="The verification status to support the clinical status of the condition.",
                        limit_choices_to={"valueset": "ConditionVerificationStatus"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="DiagnosticReport_verificationStatus",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="ConsentProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("proposed", "Proposed"),
                            ("active", "Active"),
                            ("rejected", "Rejected"),
                            ("inactive", "Inactive"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="Indicates the current state of this consent.",
                        max_length=32,
                    ),
                ),
                (
                    "dateTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this consent was issued / created / indexed.",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The classification of the consent statement - for indexing/retrieval",
                        limit_choices_to={"valueset": "ConsentCategoryCodes"},
                        related_name="Consent_category",
                        to="api.concept",
                    ),
                ),
                (
                    "organization",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The custodian of the consent",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        related_name="Consent_organization",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        blank=True,
                        help_text="The patient/healthcare consumer to whom this consent applies.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Consent_patient",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "performer",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Who is agreeing to the policy and rules",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": [
                                "patientprofile",
                                "practitionerprofile",
                            ]
                        },
                        related_name="Consent_performer",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "provisionPurpose",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Context of activities covered by this rule",
                        limit_choices_to={"valueset": "v3.PurposeOfUse"},
                        related_name="Consent_provisionPurpose",
                        to="api.concept",
                    ),
                ),
                (
                    "scope",
                    models.ForeignKey(
                        help_text="A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.",
                        limit_choices_to={"valueset": "ConsentScopeCodes"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Consent_scope",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="ConsentPolicy",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "authority",
                    models.URLField(
                        blank=True,
                        help_text="Enforcement source for policy.",
                        null=True,
                    ),
                ),
                (
                    "uri",
                    models.URLField(
                        blank=True,
                        help_text="Specific policy covered by this consent.",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.consentprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DeviceProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("entered-in-error", "Entered In Error"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="The status of the Device.",
                        max_length=16,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Where the device is found.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["locationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Device_location",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization responsible for device",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Device_owner",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        help_text="The kind or type of device.",
                        limit_choices_to={"valueset": "UKCoreDeviceType"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Device_type",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="DeviceIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.deviceprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DiagnosticReportProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("registered", "Registered"),
                            ("partial", "Partial"),
                            ("preliminary", "Preliminary"),
                            ("final", "Final"),
                        ],
                        help_text="The status of the diagnostic report.",
                        max_length=16,
                    ),
                ),
                (
                    "effectiveDateTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Clinically relevant time/time-period for report.",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        help_text="A code that classifies the clinical discipline, department or diagnostic service that created the report.",
                        limit_choices_to={"valueset": "DiagnosticServiceSectionCodes"},
                        related_name="DiagnosticReport_category_set",
                        to="api.concept",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="A code or name that describes this diagnostic report.",
                        limit_choices_to={"valueset": "UKCoreReportCode"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "performer",
                    models.ManyToManyField(
                        help_text="Who is responsible for the observation",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        related_name="DiagnosticReport_performer",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "result",
                    models.ManyToManyField(
                        help_text="that are part of this diagnostic report.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["observationprofile"]
                        },
                        related_name="DiagnosticReport_result",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "specimen",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Who is responsible for the observation",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["specimenprofile"]
                        },
                        related_name="DiagnosticReport_specimen",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="The subject of the report - usually, but not always, the patient",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="DiagnosticReport_patient",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="DiagnosticReportIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.diagnosticreportprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EncounterProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("arrived", "Arrived"),
                            ("triaged", "Triaged"),
                            ("in-progress", "In Progress"),
                            ("onleave", "On Leave"),
                            ("finished", "Finished"),
                            ("cancelled", "Cancelled"),
                        ],
                        help_text="Supports basic workflow.",
                        max_length=16,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="The start time of the encounter.",
                        null=True,
                    ),
                ),
                (
                    "hospitalizationDischargeDisposition",
                    models.ForeignKey(
                        blank=True,
                        help_text="Category or kind of location after discharge",
                        limit_choices_to={"valueset": "UKCoreDischargeDestination"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "klass",
                    models.ForeignKey(
                        help_text="Classification of patient encounter",
                        limit_choices_to={"valueset": "v3.ActEncounterCode"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="encounterclass_set",
                        to="api.concept",
                    ),
                ),
                (
                    "reasonCode",
                    models.ManyToManyField(
                        help_text="Indication, Admission diagnosis",
                        limit_choices_to={"valueset": "EncounterReasonCodes"},
                        related_name="encounterreasoncode_set",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceProvider",
                    models.ForeignKey(
                        blank=True,
                        help_text="The organization (facility) responsible for this encounter",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Encounter_serviceProvider",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="The patient or group present at the encounter",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Encounter_subject",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        help_text="Specific type of encounter",
                        limit_choices_to={"valueset": "UKCoreEncounterType"},
                        related_name="encountertype_set",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="EncounterParticipant",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "individual",
                    models.ForeignKey(
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Encounter_individual",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        limit_choices_to={"valueset": "ParticipantType"},
                        related_name="encounterparticipanttype_set",
                        to="api.concept",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.encounterprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EncounterLocation",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["locationprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="EncounterLocation_location",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.encounterprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EncounterIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.encounterprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EpisodeOfCareProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("waitlist", "Wait List"),
                            ("active", "Active"),
                            ("onhold", "On Hold"),
                            ("finished", "Finished"),
                            ("cancelled", "Cancelled"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="The status of the episode of care.",
                        max_length=16,
                    ),
                ),
                (
                    "careManager",
                    models.ForeignKey(
                        blank=True,
                        help_text="The practitioner that is the care manager/care coordinator for this patient.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="EpisodeOfCare_careManager",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "managingOrganization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization that assumes care.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="EpisodeOfCare_managingOrganization",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="The patient who is the focus of this episode of care..",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="EpisodeOfCare_patient",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Type/class - e.g. specialist referral, disease management.",
                        limit_choices_to={"valueset": "EpisodeOfCareType"},
                        related_name="EpisodeOfCare_type",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="FamilyMemberHistoryProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("partial", "Partial"),
                            ("completed", "Completed"),
                            ("health-unknown", "Health Unknown"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="A code specifying the status of the record of the family history of a specific family member.",
                        max_length=16,
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        help_text="The date (and possibly time) when the family member history was recorded or last updated."
                    ),
                ),
                ("bornDate", models.DateField(help_text="(approximate) date of birth")),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The family member described",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="The person who this history concerns.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="FamilyMemberHistory_patient",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "relationship",
                    models.ForeignKey(
                        help_text="Relationship to the subject.",
                        limit_choices_to={"valueset": "UKCorePersonRelationshipType"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="FamilyMemberHistory_relationship",
                        to="api.concept",
                    ),
                ),
                (
                    "sex",
                    models.ForeignKey(
                        blank=True,
                        help_text="The birth sex of the family member.",
                        limit_choices_to={"valueset": "AdministrativeGender"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="FamilyMemberHistory_sex",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="FamilyMemberHistoryCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("onsetAgeValue", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "onsetAgeUnit",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                ("onsetAgeSystem", models.URLField(blank=True, null=True)),
                (
                    "onsetAgeCode",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="Condition suffered by relation",
                        limit_choices_to={
                            "valueset": "Condition/Problem/DiagnosisCodes"
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="FamilyMemberHistoryCondition_code",
                        to="api.concept",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.familymemberhistoryprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FlagProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="Supports basic workflow.",
                        max_length=16,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        help_text="Flag creator",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Flag_author",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Clinical, administrative, etc.",
                        limit_choices_to={"valueset": "FlagCategory"},
                        related_name="Flag_v",
                        to="api.concept",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="The coded value or textual component of the flag to display to the user.",
                        limit_choices_to={"valueset": "FlagCode"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Flag_code",
                        to="api.concept",
                    ),
                ),
                (
                    "encounter",
                    models.ForeignKey(
                        blank=True,
                        help_text="Alert relevant during encounter",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["encounterprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Flag_encounter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="The patient, location, group, organization, or practitioner etc. this is about record this flag is associated with.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Flag_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="FlagIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.flagprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HealthcareServiceTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.healthcareserviceprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HealthcareServiceNotAvailable",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Times the Service Site is available", max_length=128
                    ),
                ),
                (
                    "during",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Service not available from this date",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.healthcareserviceprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HealthcareServiceIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                ("system", models.CharField(blank=True, max_length=128, null=True)),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.healthcareserviceprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HealthcareServiceAvailableTime",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "daysOfWeek",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("mon", "Monday"),
                                ("tue", "Tuesday"),
                                ("wed", "Wednesday"),
                                ("thu", "Thursday"),
                                ("fri", "Friday"),
                                ("sat", "Saturday"),
                                ("sun", "Sunday"),
                            ],
                            max_length=3,
                        ),
                        blank=True,
                        help_text="Indicates which days of the week are available between the start and end Times.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "allDay",
                    models.BooleanField(
                        blank=True,
                        help_text="Always available? e.g. 24 hour service",
                        null=True,
                    ),
                ),
                (
                    "availableStartTime",
                    models.TimeField(
                        blank=True,
                        help_text="Opening time of day (ignored if allDay = true)",
                        null=True,
                    ),
                ),
                (
                    "availableEndTime",
                    models.TimeField(
                        blank=True,
                        help_text="Closing time of day (ignored if allDay = true)",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.healthcareserviceprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ImmunizationProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("completed", "Completed"),
                            ("entered-in-error", "Entered In Error"),
                            ("not-done", "Not Done"),
                        ],
                        help_text="Indicates the current status of the immunization event.",
                        max_length=16,
                    ),
                ),
                (
                    "occurrenceDateTime",
                    models.DateTimeField(
                        help_text="vaccine administered or was to be administered."
                    ),
                ),
                (
                    "lotNumber",
                    models.CharField(
                        blank=True,
                        help_text="Lot number of the vaccine.",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Where immunization occurred",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["locationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Immunization_location",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "manufacturer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Name of vaccine manufacturer.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Immunization_manufacturer",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        help_text="The patient who either received or did not receive the immunization.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Immunization_patient",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "vaccineCode",
                    models.ForeignKey(
                        help_text="Vaccine that was administered or was to be administered.",
                        limit_choices_to="UKCoreVaccineCode",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="ListProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("current", "Preliminary"),
                            ("retired", "Final"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="Indicates the current state of this list.",
                        max_length=32,
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[
                            ("working", "Working"),
                            ("snapshot", "Snapshot"),
                            ("changes", "Changes"),
                        ],
                        help_text="How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
                        max_length=32,
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date that the list was prepared.",
                        null=True,
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="This code defines the purpose of the list - why it was created.",
                        limit_choices_to={"valueset": "UKCoreListCode"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="List_code",
                        to="api.concept",
                    ),
                ),
                (
                    "emptyReason",
                    models.ForeignKey(
                        blank=True,
                        help_text="If the list is empty, why the list is empty.",
                        limit_choices_to={"valueset": "UKCoreListEmptyReasonCode"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="List_emptyReason",
                        to="api.concept",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="The common subject (or patient) of the resources that are in the list if there is one.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="List_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="ListEntry",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ListEntry_item",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ListEntry_profile",
                        to="api.listprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LocationTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.locationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LocationIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code")
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.locationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LocationAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.OneToOneField(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.locationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MedicationAdministrationProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in-progress", "In Progress"),
                            ("not-done", "Not Done"),
                            ("on-hold", "On Hold"),
                            ("completed", "Completed"),
                            ("entered-in-error", "Entered In Error"),
                            ("stopped", "Stopped"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Will generally be set to show that the administration has been completed. For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.",
                        max_length=16,
                    ),
                ),
                (
                    "effectiveDateTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start and end time of administration",
                        null=True,
                    ),
                ),
                (
                    "dosageText",
                    models.TextField(
                        blank=True,
                        help_text="Free text dosage instructions.",
                        null=True,
                    ),
                ),
                (
                    "dosageRateQuantity",
                    api.fields.QuantityField(
                        blank=True,
                        help_text="Numerical value (with implicit precision)",
                        null=True,
                    ),
                ),
                (
                    "dosageDose",
                    api.fields.QuantityField(
                        blank=True,
                        help_text="Coded form of the unit",
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "dosageMethod",
                    models.ForeignKey(
                        blank=True,
                        help_text="Technique for administering medication",
                        limit_choices_to={"valueset": "UKCoreMedicationDosageMethod"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationAdministrationDosage_method",
                        to="api.concept",
                    ),
                ),
                (
                    "dosageRoute",
                    models.ForeignKey(
                        blank=True,
                        help_text="How drug should enter body",
                        limit_choices_to={
                            "valueset": "UKCoreSubstanceOrProductAdministrationRoute"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationAdministrationDosage_route",
                        to="api.concept",
                    ),
                ),
                (
                    "dosageSite",
                    models.ForeignKey(
                        blank=True,
                        help_text="Body site to administer to",
                        limit_choices_to={"valueset": "UKCoreBodySite"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationAdministrationDosage_site",
                        to="api.concept",
                    ),
                ),
                (
                    "medicationReference",
                    models.ForeignKey(
                        blank=True,
                        help_text="Identifies the medication being requested.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["medicationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationAdministration_medicationReference",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "request",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who is requesting the medication",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["medicationrequestprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationAdministration_request",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="Who or group medication request is for",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationAdministration_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="MedicationAdministrationIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationadministrationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MedicationDispenseProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("preparation", "Preparation"),
                            ("in-progress", "In Progress"),
                            ("cancelled", "Cancelled"),
                            ("on-hold", "On Hold"),
                            ("completed", "Completed"),
                            ("entered-in-error", "Entered In Error"),
                            ("stopped", "Stopped"),
                            ("declined", "Declined"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="A code specifying the state of the set of dispense events.",
                        max_length=16,
                    ),
                ),
                (
                    "whenPrepared",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start and end time of administration",
                        null=True,
                    ),
                ),
                (
                    "quantity",
                    api.fields.QuantityField(
                        blank=True,
                        help_text="Numerical value (with implicit precision)",
                        null=True,
                    ),
                ),
                (
                    "daysSupply",
                    api.fields.QuantityField(
                        blank=True,
                        help_text="Numerical value (with implicit precision)",
                        null=True,
                    ),
                ),
                (
                    "authorizingPrescription",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Who is requesting the medication",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["medicationrequestprofile"]
                        },
                        related_name="MedicationDispense_authorizingPrescription",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "medicationReference",
                    models.ForeignKey(
                        blank=True,
                        help_text="Identifies the medication being requested.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["medicationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationDispense_medicationReference",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "receiver",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Who is requesting the medication",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        related_name="MedicationDispense_receiver",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="Who or group medication request is for",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationDispense_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="MedicationDispensePerformer",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "actor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Intended performer of administration",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationDispensePerformer_actor",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationdispenseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MedicationDispenseIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationdispenseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MedicationProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="A code to indicate if the medication is in active use.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "batchLotNumber",
                    models.CharField(
                        blank=True,
                        help_text="Identifier assigned to batch",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "batchExpirationDate",
                    models.DateTimeField(
                        blank=True, help_text="When batch will expire", null=True
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        help_text="Codes that identify this medication",
                        limit_choices_to={"valueset": "UKCoreMedicationCode"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Medication_code",
                        to="api.concept",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        blank=True,
                        help_text="Codes that identify this medication",
                        limit_choices_to={"valueset": "UKCoreMedicationForm"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Medication_form",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="MedicationRequestProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("draft", "Draft"),
                            ("entered-in-error", "Entered In Error"),
                            ("on-hold", "On Hold"),
                            ("cancelled", "Revoked"),
                            ("stopped", "Stopped"),
                            ("completed", "Completed"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="A code specifying the current state of the order.",
                        max_length=16,
                    ),
                ),
                (
                    "intent",
                    models.CharField(
                        choices=[
                            ("proposal", "Proposal"),
                            ("plan", "Plan"),
                            ("order", "Order"),
                            ("original-order", "Original Order"),
                            ("reflex-order", "Reflex Order"),
                            ("filler-order", "Filler Order"),
                            ("instance-order", "Intent Order"),
                            ("option", "Option"),
                        ],
                        help_text="Whether the request is a proposal, plan, or an original order.",
                        max_length=16,
                    ),
                ),
                (
                    "authoredOn",
                    models.DateTimeField(
                        blank=True, help_text="To timestamp the event", null=True
                    ),
                ),
                (
                    "substitutionAllowedBoolean",
                    models.BooleanField(
                        blank=True,
                        help_text="Any restrictions on medication substitution.",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Provides the business context for the relevant dispensing processes",
                        limit_choices_to={
                            "valueset": "UKCoreMedicationRequestCategory"
                        },
                        related_name="MedicationRequest_category",
                        to="api.concept",
                    ),
                ),
                (
                    "courseOfTherapyType",
                    models.ForeignKey(
                        blank=True,
                        help_text="A course of therapy for a medication request",
                        limit_choices_to={
                            "valueset": "UKCoreMedicationRequestCategory"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationRequest_courseOfTherapyType",
                        to="api.concept",
                    ),
                ),
                (
                    "medicationReference",
                    models.ForeignKey(
                        blank=True,
                        help_text="Identifies the medication being requested.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["medicationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationRequest_medicationReference",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who is requesting the medication",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationRequest_requester",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="Who or group medication request is for",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationRequest_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="MedicationStatementProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("entered-in-error", "Entered In Error"),
                            ("intended", "Intended"),
                            ("stopped", "Stopped"),
                            ("on-hold", "On Hold"),
                            ("unknown", "Unknown"),
                            ("not-taken", "Not Taken"),
                        ],
                        help_text="A code representing the patient or other source's judgment about the state of the medication used that this statement is about. Generally, this will be active or completed.",
                        max_length=16,
                    ),
                ),
                (
                    "effectivePeriod",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="The interval of time during which it is being asserted that the patient is/was/will be taking the medication (or was not taking, when the MedicationStatement.taken element is No).",
                        null=True,
                    ),
                ),
                (
                    "dateAsserted",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date when the medication statement was asserted by the information source.",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        help_text="Indicates where the medication is expected to be consumed or administered.",
                        limit_choices_to={
                            "valueset": "UKCoreMedicationStatementCategory"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationStatement_category",
                        to="api.concept",
                    ),
                ),
                (
                    "medicationCodeableConcept",
                    models.ForeignKey(
                        blank=True,
                        help_text="Identifies the medication being administered. This is the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.",
                        limit_choices_to={"valueset": "MedicationCodeableConcept"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationStatement_medicationCodeableConcept",
                        to="api.concept",
                    ),
                ),
                (
                    "reasonCode",
                    models.ManyToManyField(
                        blank=True,
                        help_text="A reason for why the medication is being/was taken.",
                        limit_choices_to={
                            "valueset": "Condition/Problem/DiagnosisCodes"
                        },
                        related_name="MedicationStatement_reasonCode",
                        to="api.concept",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="The person, animal or group who is/was taking the medication.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MedicationStatement_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="MedicationStatementIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationstatementprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MessageHeaderProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "eventCodingSystem",
                    models.URLField(
                        blank=True,
                        help_text="A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.",
                        null=True,
                    ),
                ),
                (
                    "eventCodingDisplay",
                    models.TextField(
                        blank=True,
                        help_text="A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.",
                        null=True,
                    ),
                ),
                (
                    "eventCodingCode",
                    models.CharField(
                        help_text="A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.",
                        max_length=256,
                    ),
                ),
                (
                    "sourceEndpoint",
                    models.CharField(
                        help_text="Actual message source address or id", max_length=526
                    ),
                ),
                (
                    "focus",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The actual content of the message.",
                        related_name="MessageHeader_focus",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        help_text="Literal reference",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MessageHeader_sender",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="MessageHeaderDestination",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(
                        help_text="Actual destination address or id", max_length=526
                    ),
                ),
                (
                    "receiver",
                    models.ForeignKey(
                        blank=True,
                        help_text='Intended "real-world" recipient for the data',
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["organizationprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="MessageHeaderDestination_receiver",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.messageheaderprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ObservationReferenceRange",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "low",
                    models.JSONField(
                        blank=True, help_text="Low Range, if relevant", null=True
                    ),
                ),
                (
                    "high",
                    models.JSONField(
                        blank=True, help_text="High Range, if relevant", null=True
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.observationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ObservationIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/ods-organization-code",
                                "Ods Organisation Code",
                            ),
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code"),
                            ("https://fhir.nhs.uk/Id/nhs-number", "Nhs Number"),
                            (
                                "https://fhir.hl7.org.uk/Id/gmc-number",
                                "General Medical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/gphc-number",
                                "General Pharmaceutical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/nmc-number",
                                "Nurses Midwives Health Visitors Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/hcpc-number",
                                "Healthcare Professions Registration Number",
                            ),
                            ("https://fhir.nhs.uk/Id/sds-user-id", "Spine"),
                            ("https://tools.ietf.org/html/rfc4122", "Uuid"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.observationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ObservationComponent",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                ("valueQuantity", models.JSONField(blank=True, null=True)),
                (
                    "code",
                    models.ForeignKey(
                        limit_choices_to={"valueset": "UKCoreObservationType"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.observationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OperationOutcomeIssue",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("fatal", "Fatal"),
                            ("error", "Error"),
                            ("warning", "Warning"),
                            ("information", "Information"),
                        ],
                        help_text='Indicates how relevant the issue is to the overall success of the action. This is labelled as "Is Modifier" because applications should not confuse hints and warnings with errors.',
                        max_length=16,
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("Code", "Code"),
                            ("invalid", "Invalid"),
                            ("structure", "Structure"),
                            ("required", "Required"),
                            ("value", "Value"),
                            ("invariant", "Invariant"),
                            ("security", "Security"),
                            ("login", "Login"),
                            ("unknown", "Unknown"),
                            ("expired", "Expired"),
                            ("forbidden", "Forbidden"),
                            ("suppressed", "Suppressed"),
                            ("processing", "Processing"),
                            ("not-supported", "Not Supported"),
                            ("duplicate", "Duplicate"),
                            ("multiple-matches", "Multiple Matches"),
                            ("not-found", "Not Found"),
                            ("deleted", "Deleted"),
                            ("too-long", "Too Long"),
                            ("code-invalid", "Code Invalid"),
                            ("extension", "Extension"),
                            ("too-costly", "Too Costly"),
                            ("business-rule", "Business Rule"),
                            ("conflict", "Conflict"),
                            ("transient", "Transient"),
                            ("lock-error", "Lock Error"),
                            ("no-store", "No Store"),
                            ("exception", "Exception"),
                            ("timeout", "Timeout"),
                            ("incomplete", "Incomplete"),
                            ("throttled", "Throttled"),
                            ("informational", "Informational"),
                        ],
                        help_text="Error or warning code",
                        max_length=64,
                    ),
                ),
                (
                    "expression",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="FFHIRPath of element(s) related to issue",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "diagnostics",
                    models.TextField(
                        blank=True,
                        help_text="Additional diagnostic information about the issue",
                        null=True,
                    ),
                ),
                (
                    "details",
                    models.ForeignKey(
                        blank=True,
                        help_text="Additional details about the error",
                        limit_choices_to={
                            "valueset": "UKCoreOperationOutcomeIssueDetails"
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.operationoutcomeprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organizationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/ods-organization-code",
                                "Ods Organisation Code",
                            ),
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organizationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organizationprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patientprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientName",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("nickname", "Nickname"),
                            ("anonymous", "Anonymous"),
                            ("old", "Old"),
                            ("maiden", "Maiden"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "family",
                    models.TextField(
                        blank=True,
                        help_text="Family name (often called 'Surname').",
                        null=True,
                    ),
                ),
                (
                    "given",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Given names (not always 'first'). Includes middle names.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "prefix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "suffix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patientprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://fhir.nhs.uk/Id/nhs-number", "Nhs Number")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patientprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PatientAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.patientprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerName",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("nickname", "Nickname"),
                            ("anonymous", "Anonymous"),
                            ("old", "Old"),
                            ("maiden", "Maiden"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "family",
                    models.TextField(
                        blank=True,
                        help_text="Family name (often called 'Surname').",
                        null=True,
                    ),
                ),
                (
                    "given",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Given names (not always 'first'). Includes middle names.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "prefix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "suffix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            ("https://fhir.nhs.uk/Id/nhs-number", "Nhs Number"),
                            (
                                "https://fhir.hl7.org.uk/Id/gmc-number",
                                "General Medical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/gphc-number",
                                "General Pharmaceutical Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/nmc-number",
                                "Nurses Midwives Health Visitors Council Registration Number",
                            ),
                            (
                                "https://fhir.hl7.org.uk/Id/hcpc-number",
                                "Healthcare Professions Registration Number",
                            ),
                            ("https://fhir.nhs.uk/Id/sds-user-id", "Spine"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerRoleTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerroleprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PractitionerRoleIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/sds-role-profile-id",
                                "Sds Role Profile Id",
                            )
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.practitionerroleprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProcedureProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        help_text="A code specifying the state of the procedure.",
                        max_length=32,
                    ),
                ),
                (
                    "performedDateTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time the procedure was performed.",
                        null=True,
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        blank=True,
                        help_text="A code specifying the state of the procedure.",
                        limit_choices_to={"valueset": "UKCoreProcedureCode"},
                        max_length=32,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="Who the procedure was performed on",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Procedure_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="QuestionnaireItem",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "linkId",
                    models.CharField(
                        help_text="Unique id for item in questionnaire.", max_length=256
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True, help_text="The text of a question.", null=True
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("group", "Group"),
                            ("display", "Display"),
                            ("boolean", "Boolean"),
                            ("decimal", "Decimal"),
                            ("integer", "Integer"),
                            ("date", "Date"),
                            ("dateTime", "Date Time"),
                            ("string", "String"),
                        ],
                        help_text="Defines the format in which the user is to be prompted for the answer.",
                        max_length=16,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.questionnaireitem",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.questionnaireprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionnaireIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        blank=True,
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/ods-organization-code",
                                "Ods Organisation Code",
                            ),
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.questionnaireprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionnaireContact",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Name of an individual to contact",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.questionnaireprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionnaireResponseProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        help_text="Canonical identifier for this questionnaire, represented as a URI (globally unique).",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Name for this questionnaire (human friendly).",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "experimental",
                    models.BooleanField(
                        blank=True,
                        help_text="For testing purposes, not real usage.",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        blank=True, help_text="Date last changed", null=True
                    ),
                ),
                (
                    "publisher",
                    models.CharField(
                        blank=True,
                        help_text="Name of the publisher (organization or individual)",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "purpose",
                    models.TextField(
                        blank=True,
                        help_text="Intended jurisdiction for questionnaire (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "subjectType",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("AllergyIntolerance", "Allergy Intolerance"),
                                ("Appointment", "Appointment"),
                                ("Composition", "Composition"),
                                ("Condition", "Condition"),
                                ("Consent", "Consent"),
                                ("Device", "Device"),
                                ("DiagnosticReport", "Diagnostic Report"),
                                ("Encounter", "Encounter"),
                                ("EpisodeOfCare", "Episode Of Care"),
                                ("FamilyMemberHistory", "Family Member History"),
                                ("Flag", "Flag"),
                                ("HealthcareService", "Healthcare Service"),
                                ("ImagingStudy", "Imaging Study"),
                                ("Immunization", "Immunization"),
                                ("List", "List"),
                                ("Location", "Location"),
                                ("Medication", "Medication"),
                                (
                                    "MedicationAdministration",
                                    "Medication Administration",
                                ),
                                ("MedicationDispense", "Medication Dispense"),
                                ("MedicationRequest", "Medication Request"),
                                ("MedicationStatement", "Medication Statement"),
                                ("MessageHeader", "Message Header"),
                                ("Observation", "Observation"),
                                ("OperationOutcome", "Operation Outcome"),
                                ("Organization", "Organization"),
                                ("Patient", "Patient"),
                                ("Practitioner", "Practitioner"),
                                ("PractitionerRole", "Practitioner Role"),
                                ("Procedure", "Procedure"),
                                ("Questionnaire", "Questionnaire"),
                                ("QuestionnaireResponse", "Questionnaire Response"),
                                ("RelatedPerson", "Related Person"),
                                ("Schedule", "Schedule"),
                                ("ServiceRequest", "Service Request"),
                                ("Slot", "Slot"),
                                ("Specimen", "Specimen"),
                                ("Task", "Task"),
                            ],
                            max_length=32,
                        ),
                        blank=True,
                        help_text="Resource that can be subject of QuestionnaireResponse.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "effectivePeriod",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="When the questionnaire is expected to be used",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in-progress", "In Progress"),
                            ("completed", "Completed"),
                            ("amended", "Amended"),
                            ("entered-in-error", "Entered In Error"),
                            ("stopped", "Stopped"),
                        ],
                        help_text="The status of this questionnaire. Enables tracking the life-cycle of the content.",
                        max_length=16,
                    ),
                ),
                (
                    "authored",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and/or time that this set of answers were last changed.",
                        null=True,
                    ),
                ),
                (
                    "questionnaire",
                    models.URLField(
                        blank=True, help_text="Form being answered", null=True
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        help_text="The subject of the questions",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="QuestionnaireResponse_author",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "encounter",
                    models.ForeignKey(
                        blank=True,
                        help_text="The subject of the questions",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["encounterprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="QuestionnaireResponse_encounter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        blank=True,
                        help_text="The subject of the questions",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="QuestionnaireResponse_source",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="The subject of the questions",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="QuestionnaireResponse_subject",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="QuestionnaireResponseItem",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "linkId",
                    models.CharField(
                        help_text="Unique id for item in questionnaire.", max_length=256
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True, help_text="The text of a question.", null=True
                    ),
                ),
                ("answer", models.JSONField(blank=True, null=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.questionnaireresponseitem",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.questionnaireresponseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionnaireResponseIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        blank=True,
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/ods-organization-code",
                                "Ods Organisation Code",
                            ),
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.questionnaireresponseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RelatedPersonTelecom",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.relatedpersonprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RelatedPersonName",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("nickname", "Nickname"),
                            ("anonymous", "Anonymous"),
                            ("old", "Old"),
                            ("maiden", "Maiden"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "family",
                    models.TextField(
                        blank=True,
                        help_text="Family name (often called 'Surname').",
                        null=True,
                    ),
                ),
                (
                    "given",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Given names (not always 'first'). Includes middle names.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "prefix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "suffix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.relatedpersonprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RelatedPersonAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        help_text="A name associated with the contact person.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.relatedpersonprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ScheduleProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, help_text="Comments on availability", null=True
                    ),
                ),
                (
                    "planningHorizon",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Period of time covered by schedule.",
                        null=True,
                    ),
                ),
                (
                    "actor",
                    models.ManyToManyField(
                        help_text="Resource(s) that availability information is being provided for",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["locationprofile"]
                        },
                        related_name="schedule_actor",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "serviceCategory",
                    models.ManyToManyField(
                        help_text="High-level category.",
                        limit_choices_to={"valueset": "ServiceCategory"},
                        related_name="schedule_servicecategory_set",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceType",
                    models.ManyToManyField(
                        help_text="Specific service.",
                        limit_choices_to={"valueset": "ServiceType"},
                        related_name="schedule_servicetype_set",
                        to="api.concept",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        help_text="Type of specialty needed.",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        related_name="schedule_specialty_set",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="ScheduleIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.scheduleprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ServiceRequestProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("draft", "Draft"),
                            ("entered-in-error", "Entered In Error"),
                            ("on-hold", "On Hold"),
                            ("revoked", "Revoked"),
                            ("completed", "Completed"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="The status of the order.",
                        max_length=16,
                    ),
                ),
                (
                    "intent",
                    models.CharField(
                        choices=[
                            ("proposal", "Proposal"),
                            ("plan", "Plan"),
                            ("directive", "Directive"),
                            ("order", "Order"),
                            ("original-order", "Original Order"),
                            ("reflex-order", "Reflex Order"),
                            ("filler-order", "Filler Order"),
                            ("instance-order", "Intent Order"),
                            ("completed", "Completed"),
                            ("unknown", "Unknown"),
                            ("option", "Option"),
                        ],
                        help_text="Whether the request is a proposal, plan, an original order or a reflex order.",
                        max_length=16,
                    ),
                ),
                (
                    "occurrencePeriod",
                    api.fields.PeriodField(
                        blank=True, help_text="When service should start", null=True
                    ),
                ),
                (
                    "authoredOn",
                    models.DateTimeField(
                        blank=True, help_text="Date request signed", null=True
                    ),
                ),
                (
                    "patientInstruction",
                    models.TextField(
                        blank=True,
                        help_text="Patient or consumer-oriented instructions",
                        null=True,
                    ),
                ),
                (
                    "basedOn",
                    models.ManyToManyField(
                        blank=True,
                        help_text="What request fulfills.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["servicerequestprofile"]
                        },
                        related_name="ServiceRequest_basedOn",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "category",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Classification of service",
                        limit_choices_to={"valueset": "ServiceRequestCategoryCodes"},
                        related_name="ServiceRequest_category",
                        to="api.concept",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        blank=True,
                        help_text="What is being requested/ordered.",
                        limit_choices_to={"valueset": "UKCoreProcedureCode"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ServiceRequest_code",
                        to="api.concept",
                    ),
                ),
                (
                    "encounter",
                    models.ForeignKey(
                        blank=True,
                        help_text="Encounter in which the request was created.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["encounterprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ServiceRequest_encounter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "locationCode",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Requested location",
                        limit_choices_to={
                            "valueset": "v3.ServiceDeliveryLocationRoleType"
                        },
                        related_name="ServiceRequest_locationCode",
                        to="api.concept",
                    ),
                ),
                (
                    "locationReference",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Requested location.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["locationprofile"]
                        },
                        related_name="ServiceRequest_locationReference",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "performer",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Requested performer.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": [
                                "practitionerprofile",
                                "organizationprofile",
                            ]
                        },
                        related_name="ServiceRequest_performer",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "reasonCode",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Explanation/Justification for procedure or service",
                        limit_choices_to={"valueset": "UKCoreServiceRequestReasonCode"},
                        related_name="ServiceRequest_reasonCode",
                        to="api.concept",
                    ),
                ),
                (
                    "reasonReference",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Explanation/Justification for service or service",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": [
                                "diagnosticreportprofile",
                                "observationprofile",
                            ]
                        },
                        related_name="ServiceRequest_reasonReference",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who/what is requesting service.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ServiceRequest_requester",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Individual or Entity the service is ordered for.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ServiceRequest_subject",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "supportingInfo",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Additional clinical information",
                        related_name="ServiceRequest_supportingInfo",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="SlotProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("busy", "Busy"),
                            ("free", "Free"),
                            ("busy-unavailable", "Busy Unavailable"),
                            ("busy-tentative", "Busy Tentative"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="The status of the slot, e.g free, busy, etc.",
                        max_length=16,
                    ),
                ),
                (
                    "start",
                    models.DateTimeField(
                        help_text="Date/Time that the slot is to begin."
                    ),
                ),
                (
                    "end",
                    models.DateTimeField(
                        help_text="Date/Time that the slot is to conclude."
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments on the slot to describe any extended information. Such as custom constraints on the slot",
                        null=True,
                    ),
                ),
                (
                    "appointmentType",
                    models.ForeignKey(
                        blank=True,
                        help_text="The style of appointment or patient that may be booked in the slot.",
                        limit_choices_to={"valueset": "v2.0276"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slot_appointmenttype",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceCategory",
                    models.ManyToManyField(
                        help_text="A broad categorization of the service that is to be performed during this appointment.",
                        limit_choices_to={"valueset": "ServiceCategory"},
                        related_name="slot_servicecategory",
                        to="api.concept",
                    ),
                ),
                (
                    "serviceType",
                    models.ManyToManyField(
                        help_text="The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.",
                        limit_choices_to={"valueset": "ServiceType"},
                        related_name="slot_servicetype",
                        to="api.concept",
                    ),
                ),
                (
                    "specialty",
                    models.ManyToManyField(
                        help_text="The specialty of a practitioner that would be required to perform the service requested in this appointment.",
                        limit_choices_to={"valueset": "UKCorePracticeSettingCode"},
                        related_name="slot_speciality",
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="SlotIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[("https://tools.ietf.org/html/rfc4122", "Uuid")],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.slotprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SpecimenProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("available", "Available"),
                            ("unavailable", "Unavailable"),
                            ("unsatisfactory", "Unsatisfactory"),
                            ("entered-in-error", "Entered In Error"),
                        ],
                        help_text="The availability of the specimen.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "receivedTime",
                    models.DateTimeField(
                        blank=True,
                        help_text="The time when specimen was received for processing.",
                        null=True,
                    ),
                ),
                ("collectedDateTime", models.DateTimeField(blank=True, null=True)),
                (
                    "bodySite",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"valueset": "UKCoreSpecimenBodySite"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimenbodysite",
                        to="api.concept",
                    ),
                ),
                (
                    "collector",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimen_practitioner",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "method",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"valueset": "FHIRSpecimenCollectionMethod"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimenmethod",
                        to="api.concept",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Where the specimen came from.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimen_patient",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        help_text="The kind of material that forms the specimen.",
                        limit_choices_to={"valueset": "UKCoreSpecimenType"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.concept",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="TaskProfile",
            fields=[
                (
                    "baseprofile_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.baseprofile",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("requested", "Requested"),
                            ("received", "Received"),
                            ("accepted", "Accepted"),
                            ("in-progress", "In Progress"),
                        ],
                        help_text="The current status of the task.",
                        max_length=16,
                    ),
                ),
                (
                    "intent",
                    models.CharField(
                        choices=[
                            ("unknown", "Unknown"),
                            ("proposal", "Proposal"),
                            ("plan", "Plan"),
                            ("order", "Order"),
                            ("original-order", "Original Order"),
                            ("reflex-order", "Reflex Order"),
                            ("filler-order", "Filler Order"),
                            ("instance-order", "Instance Order"),
                            ("instance-option", "Instance Option"),
                        ],
                        help_text='Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.',
                        max_length=16,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("routine", "Routine"),
                            ("urgent", "Urgent"),
                            ("asap", "Asap"),
                            ("stat", "Stat"),
                        ],
                        help_text="Indicates how quickly the Task should be addressed with respect to other requests.",
                        max_length=16,
                    ),
                ),
                (
                    "executionPeriod",
                    api.fields.PeriodField(
                        blank=True, help_text="Start time of execution", null=True
                    ),
                ),
                (
                    "authoredOn",
                    models.DateTimeField(
                        blank=True, help_text="Task creation date.", null=True
                    ),
                ),
                (
                    "lastModified",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time of last modification to this task.",
                        null=True,
                    ),
                ),
                (
                    "restrictionPeriod",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="When fulfillment should start.",
                        null=True,
                    ),
                ),
                (
                    "restrictionRepetitions",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Indicates the number of times the requested action should occur.",
                        null=True,
                    ),
                ),
                (
                    "_for",
                    models.ForeignKey(
                        blank=True,
                        help_text="The entity who benefits from the performance of the service specified in the task (e.g., the patient).",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["patientprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Task_for",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "code",
                    models.ForeignKey(
                        blank=True,
                        help_text="A name or code (or both) briefly describing what the task involves.",
                        limit_choices_to={"valueset": "TaskCode"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Task_code",
                        to="api.concept",
                    ),
                ),
                (
                    "encounter",
                    models.ForeignKey(
                        blank=True,
                        help_text="The healthcare event (e.g. a patient and healthcare provider interaction) during which this task was created.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["encounterprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Task_encounter",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "focus",
                    models.ForeignKey(
                        blank=True,
                        help_text="The request being actioned or the resource being manipulated by this task.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["servicerequestprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Task_focus",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Responsible individual.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Task_owner",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "performerType",
                    models.ManyToManyField(
                        blank=True,
                        help_text="A name or code (or both) briefly describing what the task involves.",
                        limit_choices_to={"valueset": "ProcedurePerformerRoleCodes"},
                        related_name="Task_performerType",
                        to="api.concept",
                    ),
                ),
                (
                    "requester",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who is asking for task to be done.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["practitionerprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Task_requester",
                        to="api.baseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("api.baseprofile",),
        ),
        migrations.CreateModel(
            name="TaskOutput",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Label for output",
                        limit_choices_to={"valueset": "TaskOutput"},
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="TaskOutput_type",
                        to="api.concept",
                    ),
                ),
                (
                    "valueReference",
                    models.ForeignKey(
                        blank=True,
                        help_text="Result of output.",
                        limit_choices_to={
                            "polymorphic_ctype__model__in": ["servicerequestprofile"]
                        },
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="TaskOutput_valueReference",
                        to="api.baseprofile",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.taskprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskIdentifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period",
                    api.fields.PeriodField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.taskprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MedicationDispenseDosageInstruction",
            fields=[
                (
                    "dosage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.dosage",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationdispenseprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.dosage",),
        ),
        migrations.CreateModel(
            name="MedicationRequestDosageInstruction",
            fields=[
                (
                    "dosage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.dosage",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationrequestprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.dosage",),
        ),
        migrations.CreateModel(
            name="MedicationStatementDosage",
            fields=[
                (
                    "dosage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.dosage",
                    ),
                ),
                (
                    "profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationstatementprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.dosage",),
        ),
        migrations.CreateModel(
            name="MedicationDispenseDosageInstructionDoseAndRate",
            fields=[
                (
                    "doseandrate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.doseandrate",
                    ),
                ),
                (
                    "dosageInstruction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationdispensedosageinstruction",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.doseandrate",),
        ),
        migrations.CreateModel(
            name="MedicationRequestDosageInstructionDoseAndRate",
            fields=[
                (
                    "doseandrate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.doseandrate",
                    ),
                ),
                (
                    "dosageInstruction",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationrequestdosageinstruction",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.doseandrate",),
        ),
        migrations.CreateModel(
            name="MedicationStatementDosageDoseAndRate",
            fields=[
                (
                    "doseandrate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.doseandrate",
                    ),
                ),
                (
                    "dosage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.medicationstatementdosage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.doseandrate",),
        ),
    ]
