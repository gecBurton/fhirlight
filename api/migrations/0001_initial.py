# Generated by Django 5.1.4 on 2024-12-30 15:24

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Identifier",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("secondary", "Secondary"),
                            ("old", "Old"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "system",
                    models.URLField(
                        choices=[
                            (
                                "https://fhir.nhs.uk/Id/ods-organization-code",
                                "Ods Organisation Code",
                            ),
                            ("https://fhir.nhs.uk/Id/ods-site-code", "Ods Site Code"),
                            ("https://fhir.nhs.uk/Id/nhs-number", "Nhs Number"),
                        ],
                        help_text="Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                        max_length=64,
                    ),
                ),
                (
                    "value",
                    models.TextField(
                        help_text="The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Name",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("usual", "Usual"),
                            ("official", "Official"),
                            ("temp", "Temp"),
                            ("nickname", "Nickname"),
                            ("anonymous", "Anonymous"),
                            ("old", "Old"),
                            ("maiden", "Maiden"),
                        ],
                        help_text="The purpose of this identifier.",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "family",
                    models.TextField(
                        blank=True,
                        help_text="Family name (often called 'Surname').",
                        null=True,
                    ),
                ),
                (
                    "given",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Given names (not always 'first'). Includes middle names.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "prefix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "suffix",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        editable=False,
                        max_length=256,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the record is still in active use",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        help_text="A name associated with the organization."
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationAddress",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the record was/is in use",
                        null=True,
                    ),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("billing", "Billing"),
                        ],
                        help_text="The purpose of this address.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("postal", "Postal"),
                            ("physical", "Physical"),
                            ("both", "Both"),
                        ],
                        help_text="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "line",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        help_text="This component contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information.",
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The name of the city, town, suburb, village or other community or delivery center.",
                        null=True,
                    ),
                ),
                (
                    "district",
                    models.TextField(
                        blank=True,
                        help_text="The name of the administrative area (county).",
                        null=True,
                    ),
                ),
                (
                    "state",
                    models.TextField(
                        blank=True,
                        help_text="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).",
                        null=True,
                    ),
                ),
                (
                    "postalCode",
                    models.TextField(
                        blank=True,
                        help_text="A postal code designating a region defined by the postal service.",
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.TextField(
                        blank=True,
                        help_text="Country - a nation as commonly understood or generally accepted.",
                        null=True,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationContactPoint",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "system",
                    models.CharField(
                        choices=[
                            ("phone", "Phone"),
                            ("fax", "Fax"),
                            ("email", "Email"),
                            ("pager", "Pager"),
                            ("url", "Url"),
                            ("sms", "Sms"),
                            ("other", "Other"),
                        ],
                        help_text="Telecommunications form for contact point - what communications system is required to make use of the contact.",
                        max_length=8,
                    ),
                ),
                (
                    "value",
                    models.TextField(help_text="The actual contact point details."),
                ),
                (
                    "use",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("home", "Home"),
                            ("work", "Work"),
                            ("temp", "Temp"),
                            ("old", "Old"),
                            ("mobile", "Mobile"),
                        ],
                        help_text="purpose of this contact point",
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "rank",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Specify preferred order of use (1 = highest)",
                        null=True,
                    ),
                ),
                (
                    "period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End time period when the contact point was/is in use",
                        null=True,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrganizationIdentifier",
            fields=[
                (
                    "identifier_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.identifier",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("api.identifier",),
        ),
    ]
